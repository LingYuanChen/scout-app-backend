// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  AttendanceJoinEventData,
  AttendanceJoinEventResponse,
  AttendanceLeaveEventData,
  AttendanceLeaveEventResponse,
  AttendanceGetMyEventsData,
  AttendanceGetMyEventsResponse,
  AttendanceGetEventPackingListData,
  AttendanceGetEventPackingListResponse,
  AttendanceGetMyPackingListsData,
  AttendanceGetMyPackingListsResponse,
  EventsReadEventsData,
  EventsReadEventsResponse,
  EventsCreateEventData,
  EventsCreateEventResponse,
  EventsReadEventData,
  EventsReadEventResponse,
  EventsUpdateEventData,
  EventsUpdateEventResponse,
  EventsDeleteEventData,
  EventsDeleteEventResponse,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  ItemsAddPackingItemData,
  ItemsAddPackingItemResponse,
  ItemsListPackingItemsData,
  ItemsListPackingItemsResponse,
  ItemsGetEventItemsData,
  ItemsGetEventItemsResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  MealChoicesCreateMealChoiceData,
  MealChoicesCreateMealChoiceResponse,
  MealChoicesReadMealChoicesData,
  MealChoicesReadMealChoicesResponse,
  MealChoicesUpdateMealChoiceData,
  MealChoicesUpdateMealChoiceResponse,
  MealChoicesDeleteMealChoiceData,
  MealChoicesDeleteMealChoiceResponse,
  MealsCreateMealData,
  MealsCreateMealResponse,
  MealsReadMealsData,
  MealsReadMealsResponse,
  MealsReadMealData,
  MealsReadMealResponse,
  MealsUpdateMealData,
  MealsUpdateMealResponse,
  MealsDeleteMealData,
  MealsDeleteMealResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class AttendanceService {
  /**
   * Join Event
   * Student joins an event
   * @param data The data for the request.
   * @param data.eventId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static joinEvent(
    data: AttendanceJoinEventData,
  ): CancelablePromise<AttendanceJoinEventResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/attendance/{event_id}/join",
      path: {
        event_id: data.eventId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Leave Event
   * Student leaves an event by removing the attendance record
   * @param data The data for the request.
   * @param data.eventId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static leaveEvent(
    data: AttendanceLeaveEventData,
  ): CancelablePromise<AttendanceLeaveEventResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/attendance/{event_id}/leave",
      path: {
        event_id: data.eventId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get My Events
   * Get all events the student is attending
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static getMyEvents(
    data: AttendanceGetMyEventsData = {},
  ): CancelablePromise<AttendanceGetMyEventsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/attendance/my-events",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Event Packing List
   * Get packing list for an event I'm attending
   * @param data The data for the request.
   * @param data.eventId
   * @param data.skip
   * @param data.limit
   * @returns PackingItemsPublic Successful Response
   * @throws ApiError
   */
  public static getEventPackingList(
    data: AttendanceGetEventPackingListData,
  ): CancelablePromise<AttendanceGetEventPackingListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/attendance/{event_id}/packing-list",
      path: {
        event_id: data.eventId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get My Packing Lists
   * Get packing lists for all events the student is attending
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns EventPackingList Successful Response
   * @throws ApiError
   */
  public static getMyPackingLists(
    data: AttendanceGetMyPackingListsData = {},
  ): CancelablePromise<AttendanceGetMyPackingListsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/attendance/my-packing-lists",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class EventsService {
  /**
   * Read Events
   * Retrieve events.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns EventsPublic Successful Response
   * @throws ApiError
   */
  public static readEvents(
    data: EventsReadEventsData = {},
  ): CancelablePromise<EventsReadEventsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/events/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Event
   * Create new event with packing items and meal options.
   * Only teachers and superusers can create events.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns EventPublic Successful Response
   * @throws ApiError
   */
  public static createEvent(
    data: EventsCreateEventData,
  ): CancelablePromise<EventsCreateEventResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/events/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Event
   * Get event by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns EventPublic Successful Response
   * @throws ApiError
   */
  public static readEvent(
    data: EventsReadEventData,
  ): CancelablePromise<EventsReadEventResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/events/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Event
   * Update an event and its packing items.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns EventPublic Successful Response
   * @throws ApiError
   */
  public static updateEvent(
    data: EventsUpdateEventData,
  ): CancelablePromise<EventsUpdateEventResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/events/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Event
   * Delete an event.
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteEvent(
    data: EventsDeleteEventData,
  ): CancelablePromise<EventsDeleteEventResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/events/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ItemsService {
  /**
   * Read Items
   * Retrieve items catalog.
   * Only teachers and superusers can access this endpoint.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item in catalog.
   * Only teachers and superusers can create items.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * Only the teacher who created the item or superusers can update it.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * Only the teacher who created the item or superusers can delete it.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Packing Item
   * Add an item to event's packing list.
   * @param data The data for the request.
   * @param data.eventId
   * @param data.requestBody
   * @returns PackingItemPublic Successful Response
   * @throws ApiError
   */
  public static addPackingItem(
    data: ItemsAddPackingItemData,
  ): CancelablePromise<ItemsAddPackingItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/{event_id}/packing",
      path: {
        event_id: data.eventId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * List Packing Items
   * List all packing items for an event.
   * @param data The data for the request.
   * @param data.eventId
   * @param data.skip
   * @param data.limit
   * @returns PackingItemsPublic Successful Response
   * @throws ApiError
   */
  public static listPackingItems(
    data: ItemsListPackingItemsData,
  ): CancelablePromise<ItemsListPackingItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/event/{event_id}/packing",
      path: {
        event_id: data.eventId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Event Items
   * Get all items required for an event.
   * Students must be attending the event to see its packing list.
   * @param data The data for the request.
   * @param data.eventId
   * @param data.skip
   * @param data.limit
   * @returns PackingItemsPublic Successful Response
   * @throws ApiError
   */
  public static getEventItems(
    data: ItemsGetEventItemsData,
  ): CancelablePromise<ItemsGetEventItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/event/{event_id}",
      path: {
        event_id: data.eventId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class MealChoicesService {
  /**
   * Create Meal Choice
   * Create meal choice for an attendance.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MealChoice Successful Response
   * @throws ApiError
   */
  public static createMealChoice(
    data: MealChoicesCreateMealChoiceData,
  ): CancelablePromise<MealChoicesCreateMealChoiceResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/meal-choices/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Meal Choices
   * Get meal choices. Can filter by attendance_id.
   * @param data The data for the request.
   * @param data.attendanceId
   * @returns MealChoice Successful Response
   * @throws ApiError
   */
  public static readMealChoices(
    data: MealChoicesReadMealChoicesData = {},
  ): CancelablePromise<MealChoicesReadMealChoicesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/meal-choices/",
      query: {
        attendance_id: data.attendanceId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Meal Choice
   * Update a meal choice.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns MealChoice Successful Response
   * @throws ApiError
   */
  public static updateMealChoice(
    data: MealChoicesUpdateMealChoiceData,
  ): CancelablePromise<MealChoicesUpdateMealChoiceResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/meal-choices/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Meal Choice
   * Delete a meal choice.
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteMealChoice(
    data: MealChoicesDeleteMealChoiceData,
  ): CancelablePromise<MealChoicesDeleteMealChoiceResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/meal-choices/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class MealsService {
  /**
   * Create Meal
   * Create new meal. Only teachers and superusers can create meals.
   *
   * Example request body:    ```json
   * {
   * "name": "Spaghetti Bolognese",
   * "description": "Classic Italian pasta with meat sauce",
   * "price": 15.00,
   * "is_vegetarian": false,
   * "is_beef": true,
   * "calories": 650
   * }    ```
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MealPublic Successful Response
   * @throws ApiError
   */
  public static createMeal(
    data: MealsCreateMealData,
  ): CancelablePromise<MealsCreateMealResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/meals/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Meals
   * Retrieve meals.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns MealPublic Successful Response
   * @throws ApiError
   */
  public static readMeals(
    data: MealsReadMealsData = {},
  ): CancelablePromise<MealsReadMealsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/meals/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Meal
   * Get meal by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns MealPublic Successful Response
   * @throws ApiError
   */
  public static readMeal(
    data: MealsReadMealData,
  ): CancelablePromise<MealsReadMealResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/meals/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Meal
   * Update a meal.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns MealPublic Successful Response
   * @throws ApiError
   */
  public static updateMeal(
    data: MealsUpdateMealData,
  ): CancelablePromise<MealsUpdateMealResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/meals/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Meal
   * Delete a meal.
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteMeal(
    data: MealsDeleteMealData,
  ): CancelablePromise<MealsDeleteMealResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/meals/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
